{
  parameters: {
    size: "tiny",
    autoSuspendAfterSeconds: 900,
    dataApp: {
      slug: "marketing-dashboard",
      streamlit: {
        "config.toml": '[theme]\nfont = "sans serif"\ntextColor = "#222529"\nbackgroundColor = "#FFFFFF"\nsecondaryBackgroundColor = "#E6F2FF"\nprimaryColor = "#1F8FFF"',
      },
    },
    id: "31996171",
    script: [
      "import os\nfrom datetime import timedelta\nfrom datetime import date as _date\nfrom numbers import Number\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport pandas as pd\nimport streamlit as st\n\nst.set_page_config(page_title=\"Marketing Metrics\", layout=\"wide\")\n\n# Global styles for card visuals\nst.markdown(\n    \"\"\"\n    \u003cstyle\u003e\n      .card {\n        background: #ffffff;\n        border: 1px solid #e9ecef;\n        border-radius: 12px;\n        padding: 20px 18px;\n        box-shadow: 0 1px 2px rgba(16,24,40,0.05);\n        height: 100%;\n        min-height: 160px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        text-align: center;\n        gap: 6px;\n        position: relative;\n      }\n      /* Sidebar footer positioning using flex to avoid overlap */\n      [data-testid=\"stSidebar\"] \u003e div:first-child { display: flex; flex-direction: column; min-height: 100vh; }\n      .sidebar-footer { margin-top: auto; text-align: center; padding: 8px 0 10px; }\n      .card-title {\n        color: #374151;\n        font-size: 1.0rem;\n        font-weight: 400;\n        margin-bottom: 2px;\n        white-space: nowrap;\n      }\n      .card-title .title-strong { font-weight: 700; color: #111827; }\n      .card-title .unit { font-weight: 400; color: #6b7280; margin-left: 6px; }\n      /* Floating help icon top-left per card */\n      .help-floating { position: absolute; top: 10px; left: 10px; }\n      .help-floating .icon {\n        width: 18px; height: 18px; border-radius: 50%;\n        background: #eff6ff; color: #2563eb; font-weight: 700;\n        font-size: 12px; line-height: 18px; text-align: center;\n        border: 1px solid #2563eb; cursor: default; display: inline-flex; align-items: center; justify-content: center;\n      }\n      .help-floating .tip {\n        display: none; position: absolute; top: 22px; left: 0;\n        background: #111827; color: #ffffff; padding: 8px 12px; border-radius: 6px;\n        font-size: 14px; white-space: nowrap; box-shadow: 0 2px 6px rgba(0,0,0,0.15);\n        text-align: left; z-index: 1000;\n      }\n      .help-floating:hover .tip { display: block; }\n      .card-value {\n        color: #111827;\n        font-weight: 500;\n        font-size: 2.0rem;\n      }\n      /* Ensure equal gaps horizontally between Streamlit columns */\n      div[data-testid=\"stHorizontalBlock\"] { gap: 16px; }\n      .row-spacer { height: 16px; }\n      /* Pill label alignment */\n      .pill-label { display:flex; align-items:center; height:57px; font-size:0.95rem; color:#374151; }\n      .pill-label.right { justify-content:flex-end; }\n      .pill-label.left { justify-content:flex-start; }\n      .pill-mid { display:flex; align-items:center; justify-content:center; height:0px; position:relative; top:-12px; }\n    \u003c/style\u003e\n    \"\"\",\n    unsafe_allow_html=True,\n)\n\n# Use Keboola-mounted file only\ndata_path = os.path.join(os.sep, 'data', 'in', 'tables', 'marketing_metrics.csv')\n_mtime = os.path.getmtime(data_path)\ndf = pd.read_csv(data_path)\n\n# Normalize schema to have period_date\nif 'date' in df.columns:\n    df['period_date'] = pd.to_datetime(df['date'], errors='coerce')\nelse:\n    df['period_date'] = pd.to_datetime(df['year_month'].astype(str) + '-01', errors='coerce')\n\ndf['year'] = df['period_date'].dt.year.astype('Int64')\ndf['month'] = df['period_date'].dt.month.astype('Int64')\n\nlang = 'en'\nkeboola_logo = \"https://www.startupjobs.cz/cdn-cgi/image/w=2688,h=946,f=avif,webp,q=90,fit=cover/https://images-assets.startupjobs.cz/COVER/7213/8b7046b9b5b0f95d5e9ec09d33fdac68.png\"\n\n# Filters\nwith st.sidebar:\n    # Top-left Keboola branding above filters\n    st.markdown(\n        f\"\"\"\n        \u003cdiv style='display:flex; align-items:center; gap:8px; margin:4px 0 8px 0;'\u003e\n          \u003cimg src='{keboola_logo}' alt='Keboola' style='height:28px; border-radius:6px; border:1px solid #e5e7eb;'\u003e\n          \u003cdiv style='font-size:12px; color:#6b7280;'\u003ePowered by Keboola\u003c/div\u003e\n        \u003c/div\u003e\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n    # Filters header with an inline delta help tooltip next to Quick ranges\n    st.header(\"Filters\")\n    # Shipping input highlighted when empty\n    _ship_val = float(st.session_state.get('shipping_cost', 0.0) or 0.0)\n    _ship_bg = \"#fde2e7\" if _ship_val == 0.0 else \"#ffffff\"\n    st.markdown(f\"\"\"\n        \u003cdiv style='background:{_ship_bg}; border:1px solid #f1f5f9; padding:8px 10px; border-radius:8px; margin-bottom:6px;'\u003e\n        \u003cdiv style='font-size:0.9rem; color:#374151; margin-bottom:4px;'\u003eShipping cost (EUR per order)\u003c/div\u003e\n        \u003c/div\u003e\n    \"\"\", unsafe_allow_html=True)\n    st.number_input(\n        \"Shipping cost (EUR per order)\",\n        min_value=0.0,\n        step=0.1,\n        key='shipping_cost',\n        label_visibility='collapsed'\n    )\n    min_date = pd.to_datetime(df['period_date'].min()).date()\n    max_date = pd.to_datetime(df['period_date'].max()).date()\n    _options = [\n            \"Custom\",\n            \"This month\",\n            \"Last month\",\n            \"QTD\",\n            \"YTD\",\n            \"Last 30d\",\n            \"Last 60d\",\n            \"Last 90d\",\n    ]\n    _today = _date.today()\n    ui_max_date = max(_today, max_date)\n    _anchor_today = _today\n\n    def range_for_preset(preset_label: str):\n        anchor = pd.to_datetime(_anchor_today)\n        if preset_label == \"This month\":\n            p = anchor.to_period('M')\n            s, e = p.start_time.date(), p.end_time.date()\n        elif preset_label == \"Last month\":\n            prev = (anchor - pd.DateOffset(months=1)).to_period('M')\n            s, e = prev.start_time.date(), prev.end_time.date()\n        elif preset_label == \"QTD\":\n            q = anchor.to_period('Q')\n            s, e = q.start_time.date(), anchor.date()\n        elif preset_label == \"YTD\":\n            y = anchor.to_period('Y')\n            s, e = y.start_time.date(), anchor.date()\n        elif preset_label.endswith('d'):\n            days = int(preset_label.split()[1].replace('d',''))\n            s, e = (anchor - timedelta(days=days-1)).date(), anchor.date()\n        else:\n            s, e = (min_date, _anchor_today)\n        # clamp to UI bounds (data filter will naturally limit to available rows)\n        return (max(s, min_date), min(e, ui_max_date))\n\n    def match_preset_for_range(s: _date, e: _date) -\u003e str:\n        # Compare against computed ranges; return matching label else Custom\n        for opt in _options:\n            if opt == \"Custom\":\n                continue\n            rs, re = range_for_preset(opt)\n            if rs == s and re == e:\n                return opt\n        return \"Custom\"\n\n    # Initialize session defaults\n    if 'preset' not in st.session_state:\n        st.session_state['preset'] = \"Last month\"\n    if 'date_range' not in st.session_state:\n        st.session_state['date_range'] = range_for_preset(st.session_state['preset'])\n    if 'granularity' not in st.session_state:\n        st.session_state['granularity'] = \"Monthly\"\n    if 'shipping_cost' not in st.session_state:\n        st.session_state['shipping_cost'] = 0.0\n\n    def _as_date_list(dr) -\u003e list:\n        if isinstance(dr, (list, tuple)):\n            seq = list(dr)\n        elif hasattr(dr, 'tolist'):\n            try:\n                seq = dr.tolist()\n            except Exception:\n                seq = [dr]\n        else:\n            seq = [dr]\n        out = []\n        for v in seq:\n            try:\n                out.append(pd.to_datetime(v).date())\n            except Exception:\n                pass\n        return out\n\n    def _normalize_range(dr):\n        vals = _as_date_list(dr)\n        if len(vals) \u003e= 2:\n            return (vals[0], vals[1])\n        if len(vals) == 1:\n            return (vals[0], vals[0])\n        return (min_date, min_date)\n\n    def _expand_to_full_months(dr):\n        s, e = _normalize_range(dr)\n        s_p = pd.to_datetime(s).to_period('M')\n        e_p = pd.to_datetime(e).to_period('M')\n        s_full = max(min_date, s_p.start_time.date())\n        e_full = min(ui_max_date, e_p.end_time.date())\n        return (s_full, e_full)\n\n    def _on_preset_change():\n        if st.session_state['preset'] != \"Custom\":\n            desired = range_for_preset(st.session_state['preset'])\n            if st.session_state.get('granularity', 'Monthly') == 'Monthly':\n                desired = _expand_to_full_months(desired)\n            st.session_state['date_range'] = desired\n\n    def _on_date_change():\n        s, e = _normalize_range(st.session_state['date_range'])\n        if st.session_state.get('granularity', 'Monthly') == 'Monthly':\n            expanded = _expand_to_full_months((s, e))\n            # Snap picker to full months in Monthly mode\n            st.session_state['date_range'] = expanded\n            # Update preset to match expanded range if any\n            matched = match_preset_for_range(expanded[0], expanded[1])\n            st.session_state['preset'] = matched\n            return\n        matched = match_preset_for_range(s, e)\n        st.session_state['preset'] = matched\n\n    def _on_granularity_change():\n        # When switching to Monthly, expand current range to full months and reflect in picker\n        if st.session_state.get('granularity', 'Monthly') == 'Monthly':\n            expanded = _expand_to_full_months(st.session_state['date_range'])\n            st.session_state['date_range'] = expanded\n            # Try set preset accordingly\n            s, e = expanded\n            st.session_state['preset'] = match_preset_for_range(s, e)\n\n    # Widgets bound to session_state\n    st.markdown(\"\u003cdiv style='font-weight:600; margin-bottom:4px;'\u003eQuick ranges\u003c/div\u003e\", unsafe_allow_html=True)\n    preset = st.selectbox(\"Quick ranges\", _options, key='preset', on_change=_on_preset_change, label_visibility='collapsed')\n    date_range = st.date_input(\n        \"Date range\",\n        min_value=min_date,\n        max_value=ui_max_date,\n        key='date_range',\n        on_change=_on_date_change\n    )\n    granularity = st.selectbox(\"Breakdown\", [\"Monthly\", \"Daily\"], key='granularity', on_change=_on_granularity_change)\n    # Table/Plot switch pill: Table | [toggle] | Plot\n    _pill = st.columns([1, 0.5, 1])\n    with _pill[0]:\n        st.markdown(\"\u003cdiv class='pill-label right'\u003eTable\u003c/div\u003e\", unsafe_allow_html=True)\n    with _pill[1]:\n        if 'view_plot' not in st.session_state:\n            st.session_state['view_plot'] = False\n        st.markdown(\"\u003cdiv class='pill-mid'\u003e\", unsafe_allow_html=True)\n        st.toggle(\"Plot view\", key='view_plot', label_visibility='collapsed')\n        st.markdown(\"\u003c/div\u003e\", unsafe_allow_html=True)\n    with _pill[2]:\n        st.markdown(\"\u003cdiv class='pill-label left'\u003ePlot\u003c/div\u003e\", unsafe_allow_html=True)\n\n    # Plot configuration (only relevant when Plot view is active)\n    plot_options = [\n        \"Ad Costs vs Revenue vs MER\",\n        \"MER vs CM3 vs CM2\",\n        \"Revenue\",\n        \"Orders\",\n        \"CAC \u0026 ROI\",\n        \"Costs breakdown: Google+Meta vs Revenue\",\n    ]\n    st.selectbox(\"Plot type\", plot_options, index=0, key='plot_type', disabled=(not st.session_state.get('view_plot', False)))\n\n    # Final selected range from session_state (normalize to scalar dates)\n    start_date, end_date = _normalize_range(st.session_state['date_range'])\n\n    # If Monthly breakdown, expand selection to whole months (already synced to picker via callbacks)\n    if granularity == \"Monthly\":\n        _s = pd.to_datetime(start_date).to_period('M')\n        _e = pd.to_datetime(end_date).to_period('M')\n        start_date = max(min_date, _s.start_time.date())\n        end_date = min(ui_max_date, _e.end_time.date())\n\n    start_ts = pd.to_datetime(start_date)\n    end_ts = pd.to_datetime(end_date)\n    sel_mask = (df['period_date'] \u003e= start_ts) \u0026 (df['period_date'] \u003c= end_ts)\n\n    # (Removed footer branding; branding shown above filters)\n\nfdf = df[sel_mask].copy()\n\ndef t(key: str) -\u003e str:\n    labels = {\n        'title': 'Marketing Metrics Dashboard',\n        'orders': 'Orders',\n        'revenue': 'Revenue',\n        'cogs': 'COGS',\n        'cm2': 'CM2',\n        'ad_costs': 'Ad Costs',\n        'cac': 'CAC',\n        'mer': 'MER',\n        'cm3': 'CM3',\n        'roi': 'ROI',\n        'aov': 'AOV',\n        'breakdown': 'Breakdown',\n        'period': 'Period',\n        'google_costs': 'Google Costs',\n        'meta_costs': 'Meta Costs',\n    }\n    return labels.get(key, key)\n\nst.title(t('title'))\n\ndef render_card(label: str, value: float | str, unit: str | None = None, delta_pct: float | None = None, tooltip: str | None = None):\n    display = value if isinstance(value, str) else f\"{float(value):,.2f}\"\n    # Build title with unit inline, only metric name bold\n    unit_html = f\" \u003cspan class='unit'\u003e(\" + unit + \")\u003c/span\u003e\" if unit else \"\"\n    title_text = f\"\u003cspan class='title-strong'\u003e{label}\u003c/span\u003e{unit_html}\"\n    delta_html = \"\"\n    # Accept numpy scalars too\n    if isinstance(delta_pct, Number):\n        up = delta_pct \u003e= 0\n        arrow = \"▲\" if up else \"▼\"\n        try:\n            delta_abs = float(abs(delta_pct))\n        except Exception:\n            delta_abs = 0.0\n        color = \"#16a34a\" if up else \"#dc2626\"\n        delta_html = f\"\u003cdiv style='font-size:0.9rem;color:{color}'\u003e{arrow} {delta_abs:.2f}%\u003c/div\u003e\"\n    st.markdown(f\"\"\"\n        \u003cdiv class=\"card\"\u003e\n          \u003cdiv class=\"help-floating\"\u003e\u003cspan class=\"icon\"\u003eℹ\u003c/span\u003e\u003cdiv class=\"tip\"\u003e{tooltip or ''}\u003c/div\u003e\u003c/div\u003e\n          \u003cdiv class=\"card-title\"\u003e{title_text}\u003c/div\u003e\n          \u003cdiv class=\"card-value\"\u003e{display}\u003c/div\u003e\n          {delta_html}\n        \u003c/div\u003e\n    \"\"\", unsafe_allow_html=True)\n\n# Precompute aggregates for selection\ndef compute_metrics(dff: pd.DataFrame) -\u003e dict:\n    orders = float(dff['orders'].sum())\n    revenue = float(dff['revenue'].sum())\n    cogs = float(dff['cost_of_goods_sold'].sum()) if 'cost_of_goods_sold' in dff.columns else 0.0\n    # Include shipping cost per order into CM2\n    ship_cost = float(st.session_state.get('shipping_cost', 0.0))\n    cm2 = float(revenue - cogs - (ship_cost * orders))\n    google = float(dff['google_costs'].sum())\n    meta = float(dff['meta_costs'].sum())\n    ad_costs = float(dff.get('ad_costs', dff['google_costs'] + dff['meta_costs']).sum())\n    cm3 = float(cm2 - ad_costs)\n    cac = float(ad_costs / orders) if orders else 0.0\n    mer = float(revenue / ad_costs) if ad_costs else 0.0\n    roi = float(cm3 / ad_costs) if ad_costs else 0.0\n    aov = float(revenue / orders) if orders else 0.0\n    return {\n        'orders': orders,\n        'revenue': revenue,\n        'cogs': cogs,\n        'cm2': cm2,\n        'cm3': cm3,\n        'ad_costs': ad_costs,\n        'google': google,\n        'meta': meta,\n        'cac': cac,\n        'mer': mer,\n        'roi': roi,\n        'aov': aov,\n    }\n\ndef pct_change(curr: float, prev: float) -\u003e float:\n    if prev == 0:\n        return 0.0\n    return (curr - prev) / abs(prev) * 100.0\n\n# Current metrics for selected range\ncurr = compute_metrics(fdf)\n\ndef _compute_prev_range(sel_start: pd.Timestamp, sel_end: pd.Timestamp) -\u003e tuple[pd.Timestamp, pd.Timestamp]:\n    preset = st.session_state.get('preset', 'Custom')\n    gran = st.session_state.get('granularity', 'Monthly')\n    # Helper periods\n    sel_start_m = sel_start.to_period('M')\n    sel_end_m = sel_end.to_period('M')\n    if preset in (\"This month\", \"Last month\") and gran == \"Monthly\":\n        prev_m = sel_start_m - 1\n        return prev_m.start_time, prev_m.end_time\n    if preset == \"YTD\" and gran == \"Monthly\":\n        # Jan to current end month of previous year\n        prev_start_y = (sel_start.to_period('Y') - 1).start_time\n        prev_end_y = (sel_end_m - 12).end_time\n        return prev_start_y, prev_end_y\n    if preset == \"QTD\" and gran == \"Monthly\":\n        # Previous full quarter\n        curr_q = sel_end.to_period('Q')\n        prev_q = curr_q - 1\n        return prev_q.start_time, prev_q.end_time\n    # Rolling windows like Last 30d/60d/90d or Custom: same-length immediately preceding\n    window_days = (sel_end.normalize() - sel_start.normalize()).days + 1\n    prev_end = sel_start.normalize() - pd.Timedelta(days=1)\n    prev_start = prev_end - pd.Timedelta(days=window_days - 1)\n    return prev_start, prev_end\n\nprev_start, prev_end = _compute_prev_range(start_ts, end_ts)\n\nprev_mask = (df['period_date'] \u003e= prev_start) \u0026 (df['period_date'] \u003c= prev_end)\nprevdf = df[prev_mask]\nprev = compute_metrics(prevdf)\n\neur = 'EUR'\npct = '%'\n\n# Tooltips mapping\ntooltips = {\n    t('revenue'): 'Revenue = sum(totalPriceWithoutVat) from Shoptet orders, excluding cancelled lines',\n    t('orders'): 'Orders = count of distinct Shoptet order codes, excluding cancelled',\n    t('ad_costs'): 'Ad Costs = Google Costs + Meta Costs (+ Other, if present)',\n    t('cac'): 'CAC = Ad Costs ÷ Orders',\n    t('roi'): 'ROI = CM3 ÷ Ad Costs',\n    t('mer'): 'MER = Revenue ÷ Ad Costs (unitless)',\n    t('cm2'): 'CM2 = Revenue − COGS − Shipping (Shipping = shipping_cost × orders)',\n    t('cm3'): 'CM3 = CM2 − Ad Costs',\n    t('aov'): 'AOV = Revenue ÷ Orders',\n    t('google_costs'): 'Google Costs = sum(advertiserAdCost) from GA4',\n    t('meta_costs'): 'Meta Costs = sum(spend) from Meta Ads insights',\n}\n\n# First row: Revenue, Orders, Ad Costs, CAC, ROI\nrow1 = st.columns(5)\nwith row1[0]:\n    render_card(t('revenue'), curr['revenue'], eur, pct_change(curr['revenue'], prev['revenue']), tooltips[t('revenue')])\nwith row1[1]:\n    render_card(t('orders'), curr['orders'], None, pct_change(curr['orders'], prev['orders']), tooltips[t('orders')])\nwith row1[2]:\n    render_card(t('ad_costs'), curr['ad_costs'], eur, pct_change(curr['ad_costs'], prev['ad_costs']), tooltips[t('ad_costs')])\nwith row1[3]:\n    render_card(t('cac'), curr['cac'], eur, pct_change(curr['cac'], prev['cac']), tooltips[t('cac')])\nwith row1[4]:\n    render_card(t('roi'), curr['roi'], pct, pct_change(curr['roi'], prev['roi']), tooltips[t('roi')])\n\n# Second row: CM2, CM3, AOV, Google Costs, Meta Costs\nst.markdown('\u003cdiv class=\"row-spacer\"\u003e\u003c/div\u003e', unsafe_allow_html=True)\nrow2 = st.columns(5)\nwith row2[0]:\n    render_card(t('cm2'), curr['cm2'], eur, pct_change(curr['cm2'], prev['cm2']), tooltips[t('cm2')])\nwith row2[1]:\n    render_card(t('cm3'), curr['cm3'], eur, pct_change(curr['cm3'], prev['cm3']), tooltips[t('cm3')])\nwith row2[2]:\n    render_card(t('mer'), curr['mer'], None, pct_change(curr['mer'], prev['mer']), tooltips[t('mer')])\nwith row2[3]:\n    render_card(t('google_costs'), curr['google'], eur, pct_change(curr['google'], prev['google']), tooltips[t('google_costs')])\nwith row2[4]:\n    render_card(t('meta_costs'), curr['meta'], eur, pct_change(curr['meta'], prev['meta']), tooltips[t('meta_costs')])\n\nst.divider()\nst.subheader(t('breakdown'))\n\n# Build breakdown table according to granularity\nif st.session_state.get('granularity', 'Monthly') == \"Daily\":\n    # Show selected range daily rows\n    dff = fdf.copy()\n    dff['date'] = dff['period_date'].dt.strftime('%Y-%m-%d')\n    # Assemble daily view\n    df_show = dff[['date', 'orders', 'google_costs', 'meta_costs', 'ad_costs', 'revenue', 'cost_of_goods_sold', 'cm2', 'cm3', 'cac', 'mer', 'roi', 'aov']].copy()\n    df_show = df_show.sort_values('date')\n    df_plot = df_show.copy()\n    # Use string date as x to avoid month-start normalization\n    df_plot['x'] = df_plot['date']\nelse:\n    # Aggregate by month within the selected range only\n    ydf = fdf.copy()\n    ydf['year_month'] = ydf['period_date'].dt.to_period('M').astype(str)\n    agg = ydf.groupby('year_month', as_index=False).agg(\n        orders=('orders', 'sum'),\n        google_costs=('google_costs', 'sum'),\n        meta_costs=('meta_costs', 'sum'),\n        other_costs=('other_costs', 'sum') if 'other_costs' in ydf.columns else ('orders', 'sum'),\n        revenue=('revenue', 'sum'),\n        cogs=('cost_of_goods_sold', 'sum')\n    ).rename(columns={'cogs': 'cost_of_goods_sold'})\n    agg['ad_costs'] = agg['google_costs'] + agg['meta_costs'] + (agg['other_costs'] if 'other_costs' in agg.columns else 0)\n    # Adjust CM2 monthly with shipping cost per order\n    _ship = float(st.session_state.get('shipping_cost', 0.0))\n    agg['cm2'] = agg['revenue'] - agg['cost_of_goods_sold'] - (_ship * agg['orders'])\n    agg['cm3'] = agg['cm2'] - agg['ad_costs']\n    agg['cac'] = agg.apply(lambda r: (r['ad_costs'] / r['orders']) if r['orders'] \u003e 0 else 0.0, axis=1)\n    agg['mer'] = agg.apply(lambda r: (r['revenue'] / r['ad_costs']) if r['ad_costs'] \u003e 0 else 0.0, axis=1)\n    agg['roi'] = agg.apply(lambda r: (r['cm3'] / r['ad_costs']) if r['ad_costs'] \u003e 0 else 0.0, axis=1)\n    agg['aov'] = agg.apply(lambda r: (r['revenue'] / r['orders']) if r['orders'] \u003e 0 else 0.0, axis=1)\n    df_show = agg[['year_month', 'orders', 'google_costs', 'meta_costs', 'ad_costs', 'revenue', 'cost_of_goods_sold', 'cm2', 'cm3', 'cac', 'mer', 'roi', 'aov']].copy()\n    df_show = df_show.sort_values('year_month')\n    df_plot = df_show.copy()\n    # Use month label as x for monthly plots to avoid first-of-month dates in tooltips\n    df_plot['x'] = pd.to_datetime(df_plot['year_month'] + '-01', errors='coerce').dt.strftime('%b %Y')\n\nif not st.session_state.get('view_plot', False):\n    df_show = df_show.reset_index(drop=True)\n    # format all non-date columns to 2 decimals for display\n    display_df = df_show.copy()\n    id_col = 'date' if 'date' in display_df.columns else ('year_month' if 'year_month' in display_df.columns else None)\n    for _col in display_df.columns:\n        if _col != id_col:\n            display_df[_col] = display_df[_col].apply(lambda v: (f\"{float(v):.2f}\" if pd.notnull(v) else \"\"))\n    _rows = min(12, len(df_show)) if len(df_show) else 12\n    _row_height = 34\n    _header_height = 38\n    _padding = 16\n    _height = _header_height + (_rows * _row_height) + _padding\n    st.dataframe(display_df, use_container_width=True, height=_height, hide_index=True)\nelse:\n    # Build modern Plotly time-series per selected plot type\n    sel = st.session_state.get('plot_type', 'Ad Costs vs Revenue vs MER')\n    _is_monthly = st.session_state.get('granularity', 'Monthly') == 'Monthly'\n    _x_title = 'Month' if _is_monthly else 'Date'\n    fig = go.Figure()\n    if sel == 'Ad Costs vs Revenue vs MER':\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['revenue'], mode='lines', name='Revenue (EUR)',\n            line=dict(color='#2563eb', width=2),\n            hovertemplate=('Month=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['ad_costs'], mode='lines', name='Ad Costs (EUR)',\n            line=dict(color='#dc2626', width=2, dash='dash'),\n            hovertemplate=('Month=%{x}\u003cbr\u003eAd Costs (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eAd Costs (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['mer'].round(2), mode='lines', name='MER',\n            line=dict(color='#10b981', width=2), yaxis='y2',\n            hovertemplate=('Month=%{x}\u003cbr\u003eMER=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eMER=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.update_layout(yaxis2=dict(title='MER', overlaying='y', side='right', showgrid=False))\n        y_title = 'Revenue / Ad Costs (EUR)'\n    elif sel == 'MER vs CM3 vs CM2':\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['cm2'], mode='lines', name='CM2 (EUR)',\n            line=dict(color='#2563eb', width=2),\n            hovertemplate=('Month=%{x}\u003cbr\u003eCM2 (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eCM2 (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['cm3'], mode='lines', name='CM3 (EUR)',\n            line=dict(color='#dc2626', width=2, dash='dash'),\n            hovertemplate=('Month=%{x}\u003cbr\u003eCM3 (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eCM3 (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['mer'].round(2), mode='lines', name='MER',\n            line=dict(color='#10b981', width=2), yaxis='y2',\n            hovertemplate=('Month=%{x}\u003cbr\u003eMER=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eMER=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.update_layout(yaxis2=dict(title='MER', overlaying='y', side='right', showgrid=False))\n        y_title = 'CM2 / CM3 (EUR)'\n    elif sel == 'Revenue':\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['revenue'], mode='lines+markers', name='Revenue (EUR)',\n            line=dict(color='#2563eb', width=2), marker=dict(size=4),\n            hovertemplate=('Month=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        y_title = 'Revenue (EUR)'\n    elif sel == 'Orders':\n        fig.add_trace(go.Bar(\n            x=df_plot['x'], y=df_plot['orders'], name='Orders', marker_color='#10b981', opacity=0.7,\n            hovertemplate=('Month=%{x}\u003cbr\u003eOrders=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eOrders=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        y_title = 'Orders'\n    elif sel == 'CAC \u0026 ROI':\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['cac'], mode='lines', name='CAC (EUR)',\n            line=dict(color='#7c3aed', width=2),\n            hovertemplate=('Month=%{x}\u003cbr\u003eCAC (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eCAC (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['roi'], mode='lines', name='ROI',\n            line=dict(color='#f59e0b', width=2, dash='dot'), yaxis='y2',\n            hovertemplate=('Month=%{x}\u003cbr\u003eROI=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eROI=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.update_layout(yaxis2=dict(title='ROI', overlaying='y', side='right', showgrid=False))\n        y_title = 'CAC (EUR)'\n    elif sel == 'Costs breakdown: Google+Meta vs Revenue':\n        fig.add_trace(go.Bar(\n            x=df_plot['x'], y=(df_plot['google_costs'] + df_plot['meta_costs']), name='Ad Costs (Google+Meta)',\n            marker_color='#64748b', opacity=0.6,\n            hovertemplate=('Month=%{x}\u003cbr\u003eAd Costs (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eAd Costs (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.add_trace(go.Scatter(\n            x=df_plot['x'], y=df_plot['revenue'], mode='lines', name='Revenue (EUR)',\n            line=dict(color='#2563eb', width=2), yaxis='y2',\n            hovertemplate=('Month=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e' if _is_monthly else 'Date=%{x}\u003cbr\u003eRevenue (EUR)=%{y:.2f}\u003cextra\u003e\u003c/extra\u003e')\n        ))\n        fig.update_layout(yaxis2=dict(title='Revenue (EUR)', overlaying='y', side='right', showgrid=False))\n        y_title = 'Ad Costs (EUR)'\n    else:\n        y_title = 'Value'\n    fig.update_layout(\n        template='plotly_white', hovermode='x unified',\n        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),\n        margin=dict(l=10, r=10, t=10, b=10),\n        xaxis=dict(title=_x_title), yaxis=dict(title=y_title, gridcolor='rgba(0,0,0,0.05)')\n    )\n    st.plotly_chart(fig, use_container_width=True)\n\n\n\n",
    ],
  },
  authorization: {
    app_proxy: {
      auth_providers: [],
      auth_rules: [
        {
          type: "pathPrefix",
          value: "/",
          auth_required: false,
        },
      ],
    },
  },
  storage: {
    input: {
      tables: [
        {
          source: "out.c-marketing_metrics.marketing_metrics",
          destination: "marketing_metrics.csv",
          where_column: "",
          where_values: [],
          where_operator: "eq",
          columns: [],
          keep_internal_timestamp_column: false,
        },
      ],
    },
  },
}
