/* -------------------------------------------------------------------------------------------------------------------------------------------------------- */ /* - 2 YEAR SNAPSHOT: create a calendar and filling it up with the customer */ /* -------------------------------------------------------------------------------------------------------------------------------------------------------- */ /* - CLEANUP ORDERS TO INCLUDE ONLY SUCESSFUL */
CREATE TABLE `cleaned_orders` AS
SELECT *
FROM `bdm_orders`
WHERE CAST(IS_SUCESSFUL AS BOOL) != FALSE
  AND ORDER_CUSTOMER_EMAIL != '';

CREATE OR REPLACE TABLE `CALENDAR` AS
SELECT
  DATE_ADD(DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR), INTERVAL day_offset DAY) AS SNAPSHOT_DATE
FROM UNNEST(GENERATE_ARRAY(0, 729)) AS day_offset;

CREATE OR REPLACE TABLE `CALENDAR_DAILY` AS
SELECT 
  CLIENT.*,
  CAL.SNAPSHOT_DATE
FROM `CALENDAR` AS CAL
LEFT JOIN (
  SELECT DISTINCT CUSTOMER_ID
  FROM `cleaned_orders`
) AS CLIENT
ON TRUE;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------- */ /* - RFM */ /* -------------------------------------------------------------------------------------------------------------------------------------------------------- */
CREATE OR REPLACE TABLE `RFM_TEMPORARY` AS
WITH 
declare_variables AS
(SELECT -3 AS M_REVENUE_MONTHS,
		-6 AS R_MONTHS
),
first_last_order_date AS 
(
SELECT
    SNAP.CUSTOMER_ID,
    CAST(SNAP.SNAPSHOT_DATE AS DATE) AS SNAPSHOT_DATE,
	MIN(CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE)) AS FIRST_SUCCEEDED_TRANSACTION_DATE,
    MAX(CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE)) AS LAST_SUCCEEDED_TRANSACTION_DATE,
    COUNT(
  CASE
    WHEN CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE) >= DATE_ADD(SNAPSHOT_DATE, INTERVAL (SELECT M_REVENUE_MONTHS FROM declare_variables) MONTH)
      AND CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE) < SNAPSHOT_DATE
    THEN MA.ORDER_ID
  END
) AS TX_COUNT_3M, /* - Raw M */
    SUM(
      CASE
        WHEN CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE) >= DATE_ADD(SNAPSHOT_DATE, INTERVAL (SELECT M_REVENUE_MONTHS FROM declare_variables) MONTH)
        AND (
          CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE) < SNAPSHOT_DATE
        )
        THEN CAST(MA.ORDER_TOTAL_PRICE_WITHOUT_TAXES AS FLOAT64)
        ELSE 0
      END
    ) AS REVENUE_SUM_3M, /* - RFM score with quintile */
FROM `cleaned_orders` AS MA
  INNER JOIN `CALENDAR_DAILY` AS SNAP
    ON (
      MA.ORDER_CUSTOMER_EMAIL = SNAP.CUSTOMER_ID OR MA.CUSTOMER_ID = SNAP.CUSTOMER_ID
    )
    AND CAST(TIMESTAMP(MA.ORDER_DATE) AS DATE) < SNAP.SNAPSHOT_DATE
  GROUP BY
    SNAP.CUSTOMER_ID,
    SNAP.SNAPSHOT_DATE
  HAVING
    LAST_SUCCEEDED_TRANSACTION_DATE >= DATE_ADD(SNAP.SNAPSHOT_DATE, INTERVAL (SELECT R_MONTHS FROM declare_variables) MONTH)
),
days_since_last_order AS
(
SELECT CUSTOMER_ID,
    SNAPSHOT_DATE,
    FIRST_SUCCEEDED_TRANSACTION_DATE,
    LAST_SUCCEEDED_TRANSACTION_DATE, /* - Raw R */
    DATE_DIFF(SNAPSHOT_DATE, LAST_SUCCEEDED_TRANSACTION_DATE, DAY) AS DAYS_SINCE, /* - Raw F */
    TX_COUNT_3M, /* - Raw M */
    REVENUE_SUM_3M
FROM first_last_order_date
),
ntiles AS
(
SELECT CUSTOMER_ID,
    SNAPSHOT_DATE,
    FIRST_SUCCEEDED_TRANSACTION_DATE,
    LAST_SUCCEEDED_TRANSACTION_DATE, /* - Raw R */
    DAYS_SINCE, /* - Raw F */
    TX_COUNT_3M, /* - Raw M */
    REVENUE_SUM_3M,
    NTILE(5) OVER (PARTITION BY SNAPSHOT_DATE ORDER BY DAYS_SINCE DESC NULLS FIRST) AS RECENCY_NTILE_3M,
    NTILE(5) OVER (PARTITION BY SNAPSHOT_DATE ORDER BY TX_COUNT_3M NULLS LAST) AS TX_COUNT_NTILE_3M,
    NTILE(5) OVER (PARTITION BY SNAPSHOT_DATE ORDER BY REVENUE_SUM_3M NULLS LAST) AS REVENUE_SUM_NTILE_3M
FROM days_since_last_order
)
,SC AS (
  SELECT
    CUSTOMER_ID,
    SNAPSHOT_DATE,
    FIRST_SUCCEEDED_TRANSACTION_DATE,
    LAST_SUCCEEDED_TRANSACTION_DATE, /* - Raw R */
    DAYS_SINCE, /* - Raw F */
    TX_COUNT_3M, /* - Raw M */
    REVENUE_SUM_3M, /* - RFM score with quintile */
    RECENCY_NTILE_3M,
    TX_COUNT_NTILE_3M,
    REVENUE_SUM_NTILE_3M, /* - Final Score */
    CAST(RECENCY_NTILE_3M AS STRING) || CAST(TX_COUNT_NTILE_3M AS STRING) || CAST(REVENUE_SUM_NTILE_3M AS STRING) AS FINAL_SCORE
  FROM ntiles
)
SELECT
  S.CUSTOMER_ID,
  S.SNAPSHOT_DATE,
  S.FIRST_SUCCEEDED_TRANSACTION_DATE,
  S.LAST_SUCCEEDED_TRANSACTION_DATE,
  S.DAYS_SINCE, /* - raw r */
  S.TX_COUNT_3M, /* - raw f */
  S.REVENUE_SUM_3M, /* - raw m */
  S.RECENCY_NTILE_3M, /* - r quantile */
  S.TX_COUNT_NTILE_3M, /* - quantile f */
  S.REVENUE_SUM_NTILE_3M, /* - quantile m */
  S.FINAL_SCORE,
  MAP.SEGMENT,
  MAP.SEGMENT_NR,
  LEAD(SEGMENT) OVER (PARTITION BY S.CUSTOMER_ID ORDER BY S.SNAPSHOT_DATE DESC) AS PRE_SEG_1,
  LEAD(SEGMENT_NR) OVER (PARTITION BY S.CUSTOMER_ID ORDER BY S.SNAPSHOT_DATE DESC) AS PRE_SEG_NUMBER_1
FROM SC AS S
LEFT JOIN `MAPPING_SEGMENT_RFM` AS MAP
  ON S.FINAL_SCORE = MAP.SCORE;

CREATE OR REPLACE TABLE RFM_FINAL AS
WITH RFM AS (
  SELECT
    *
  FROM RFM_TEMPORARY
  WHERE
    SEGMENT <> PRE_SEG_1
  ORDER BY
    CUSTOMER_ID NULLS LAST,
    SNAPSHOT_DATE DESC NULLS FIRST
)
SELECT
  CUSTOMER_ID,
  SNAPSHOT_DATE,
  DAYS_SINCE AS R_RAW,
  RECENCY_NTILE_3M AS R_SCORE,
  TX_COUNT_3M AS F_RAW,
  TX_COUNT_NTILE_3M AS F_SCORE,
  REVENUE_SUM_3M AS M_RAW,
  REVENUE_SUM_NTILE_3M AS M_SCORE,
  FINAL_SCORE,
  SEGMENT,
  SEGMENT_NR,
  PRE_SEG_1,
  PRE_SEG_NUMBER_1,
  COALESCE(
    LEAD(RFM.SNAPSHOT_DATE) OVER (PARTITION BY RFM.CUSTOMER_ID ORDER BY RFM.SNAPSHOT_DATE) - SNAPSHOT_DATE,
    CURRENT_DATE - SNAPSHOT_DATE
  ) AS TIME_AS,
  FIRST_SUCCEEDED_TRANSACTION_DATE
FROM RFM;

ALTER TABLE RFM_FINAL ADD COLUMN ACTUAL_STATE BOOL /* adding info about actual status */;

UPDATE RFM_FINAL SET ACTUAL_STATE = CAST(FALSE AS BOOL) WHERE ACTUAL_STATE is null;

UPDATE RFM_FINAL
SET ACTUAL_STATE = CASE
    WHEN NOT act.customer_id IS NULL THEN TRUE
    ELSE FALSE
  END
FROM (
  SELECT
    active.customer_id,
    active.max_date,
    MIN(segment_nr) AS segment
  FROM RFM_FINAL AS rfm
  INNER JOIN (
    SELECT
      customer_id,
      MAX(snapshot_date) AS max_date
    FROM RFM_FINAL
    WHERE
      CAST(snapshot_date AS DATE) <= CURRENT_DATE
    GROUP BY
      customer_id
  ) AS active
    ON CAST(active.customer_id AS STRING) = CAST(rfm.customer_id AS STRING)
    AND CAST(active.max_date AS STRING) = CAST(rfm.snapshot_date AS STRING)
  GROUP BY
    active.customer_id,
    active.max_date
) AS act
WHERE
  CAST(act.customer_id AS STRING) = CAST(RFM_FINAL.customer_id AS STRING)
  AND CAST(act.max_date AS STRING) = CAST(RFM_FINAL.snapshot_date AS STRING)
  AND act.segment = RFM_FINAL.segment_nr;  